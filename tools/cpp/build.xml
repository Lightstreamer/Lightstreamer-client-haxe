<project name="C++ client library" 
  xmlns:if="ant:if"
  default="package" 
  basedir="../..">

  <description>
  Buildfile for the C++ client library
  </description>

  <condition property="onmac">
    <os family="mac"/>
  </condition>

  <condition property="onlinux">
    <os family="unix"/>
  </condition>

  <condition property="onwindows">
    <os family="windows"/>
  </condition>

  <property name="tools" location="tools/cpp"/>

  <!-- if the property is undefined, the debug configuration is the default -->
  <property name="build.settings" location="${tools}/res/build.mac.debug.hxml" if:set="onmac"/>
  <property name="build.settings" location="${tools}/res/build.linux.debug.hxml" if:set="onlinux"/>
  <property name="build.settings" location="${tools}/res/build.win.debug.hxml" if:set="onwindows"/>

  <property name="test.settings" location="${tools}/res/test.mac.hxml" if:set="onmac"/>
  <property name="test.settings" location="${tools}/res/test.linux.hxml" if:set="onlinux"/>
  <property name="test.settings" location="${tools}/res/test.win.hxml" if:set="onwindows"/>

  <!-- read the output folder from the build settings -->
  <exec executable="haxe" failonerror="true" outputproperty="hxml.output">
    <arg line="-p ${tools}/res --run ReadHxml ${build.settings}"/>
  </exec>

  <property name="build" location="${hxml.output}"/>
  <property name="test" location="bin-test/cpp"/>
  <property name="docs" location="bin/cpp/docs"/>
  <property name="wrapper.src" location="src/wrapper/cpp"/>

  <property file="${tools}/build.properties"/>

  <target name="package" depends="package_haxe" description="Build the library">
  </target>

  <target name="package_haxe" depends="copy_modules">
    <echo message="Version: ${version} build ${build.number}"/>
    <echo message="CID: ${cid}"/>
    <exec executable="haxe" failonerror="true">
      <arg value="build.cpp.hxml"/>
      <arg value="${build.settings}"/>
      <arg line="-D no-traces"/>
      <arg value="-D"/><arg value="LS_VERSION=${version}"/>
      <arg value="-D"/><arg value="LS_BUILD=${build.number}"/>
      <arg value="-D"/><arg value="LS_CID=${cid}"/>
      <!-- output lib is saved in ${build} -->
    </exec>
  </target>

  <target name="copy_modules">
    <copy file="src/wrapper/cpp/lightstreamer.build.xml" todir="${build}" verbose="true"/>
    <copy todir="${build}/include" verbose="true">
      <fileset dir="${wrapper.src}/Base/include"/>
    </copy>
    <copy todir="${build}/src/Lightstreamer" verbose="true">
      <fileset dir="${wrapper.src}/Base/src"/>
    </copy>
    <copy todir="${build}/include" verbose="true">
      <fileset dir="${wrapper.src}/HxPoco/include"/>
    </copy>
    <copy todir="${build}/src/Lightstreamer/HxPoco" verbose="true">
      <fileset dir="${wrapper.src}/HxPoco/src"/>
    </copy>
  </target>

  <target name="docs" description="Build the docs">
    <mkdir dir="${docs}"/>
    <exec executable="doxygen" dir="${tools}" failonerror="true">
      <env key="LS_VERSION" value="${version}"/>
      <env key="LS_OUTPUT"  value="${docs}/api"/>
    </exec>
  </target>

  <target name="test" description="Run the tests" depends="build_test">
    <exec executable="${test}/TestAll-debug" failonerror="true"/>
  </target>

  <target name="build_test" depends="copy_modules_for_tests">
    <exec executable="haxe" failonerror="true">
      <arg value="test.cpp.hxml"/>
      <arg value="${test.settings}"/>
      <arg value="com.lightstreamer.internal.BuildConfig"/>
      <arg value="-D" if:set="UTEST_PATTERN"/><arg value="UTEST_PATTERN=${UTEST_PATTERN}" if:set="UTEST_PATTERN"/>
    </exec>
  </target>

  <target name="copy_modules_for_tests">
    <copy file="src/wrapper/cpp/lightstreamer.build.xml" todir="${test}" verbose="true"/>
    <copy todir="${test}/include" verbose="true">
      <fileset dir="${wrapper.src}/Base/include"/>
    </copy>
    <copy todir="${test}/src/Lightstreamer" verbose="true">
      <fileset dir="${wrapper.src}/Base/src"/>
    </copy>
    <copy todir="${test}/include" verbose="true">
      <fileset dir="${wrapper.src}/HxPoco/include"/>
    </copy>
    <copy todir="${test}/src/Lightstreamer/HxPoco" verbose="true">
      <fileset dir="${wrapper.src}/HxPoco/src"/>
    </copy>
  </target>

  <target name="clean" description="Clean the project">
    <delete dir="bin/cpp"/>
    <delete dir="${test}"/>
  </target>
</project>