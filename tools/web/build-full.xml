<project name="Web client library" 
  xmlns:if="ant:if" xmlns:unless="ant:unless"
  default="package" 
  basedir="../..">

  <description>
  Buildfile for the Web client library
  </description>

  <property name="tools" location="tools/web"/>
  <property name="build" location="bin/web/build/full"/>
  <property name="dist" location="bin/web/build/dist/npm"/>
  <property name="obj" location="${build}/obj"/>
  <property name="obj.api.lib" location="${obj}/ls_web_client_api.js"/>
  <property name="obj.wrapper.lib" location="${obj}/ls_web_client_wrapper.js"/>
  <property name="test" location="bin-test/web"/>
  <property name="tools.base.dir" location="tools"/>
  <property name="build.base.dir" location="bin/web/build"/>
  <property file="${tools}/build.properties"/>

  <property name="haxe.orig.lib" location="${obj}/ls_web_client_haxe_orig.js"/>
  <property name="haxe.lib" location="${obj}/ls_web_client_haxe.js"/>
  <property name="rollup.config" location="${tools}/res/rollup.config.full.mjs"/>
  
  <property name="rollup.config.widgets" location="${tools}/res/rollup.config.widgets.mjs"/>
  <property name="widgets.lib" location="${obj}/lightstreamer-widgets.js"/>
  <property name="package.json.template" location="${tools}/res/package.json"/>
  <property name="package.json" location="${dist}/package.json"/>
  <property name="readme.md.template" location="${tools}/res/doc/README.md"/>
  <property name="readme.md" location="${dist}/README.md"/>
  <property name="types.d.ts.log" location="${dist}/../types.d.ts.log"/>

  <property name="wrapper" location="src/wrapper/web/full"/>
  <property name="api.inc" location="${wrapper}/api.inc"/>
  <property name="haxe.inc" location="${wrapper}/haxe.inc"/>
  <property name="wrapper.inc" location="${wrapper}/wrapper.inc"/>
  <property name="js.dir" location="src/wrapper/js"/>

  <target name="package" depends="types.d.ts" description="Build the library">
  </target>

  <target name="types.d.ts" depends="package_libs">
     <exec executable="npx" failonerror="true" output="${types.d.ts.log}">
      <arg value="jsdoc"/>
      <arg value="-t"/>
      <arg value="node_modules/tsd-jsdoc/dist"/>
      <arg value="-d"/>
      <arg value="${dist}"/>
      <arg value="${dist}/lightstreamer.js"/>
    </exec>
    <exec executable="node" failonerror="true">
      <arg value="${tools.base.dir}/fix-types-d-ts"/>
      <arg value="${dist}"/>
      <arg value="lightstreamer-client-web"/>
    </exec>
    <echo>Log of types.d.ts is saved in `${types.d.ts.log}`</echo>
  </target>

  <target name="package_libs" depends="package_haxe,package_widgets">
    <exec executable="npx" failonerror="true">
      <arg value="rollup"/>
      <arg value="--config"/>
      <arg value="${rollup.config}"/>
      <!-- output is saved in ${dist} -->
    </exec>
  </target>

  <target name="package_widgets" depends="package_common">
    <exec executable="npx" failonerror="true">
      <arg value="rollup"/>
      <arg value="--config"/>
      <arg value="${rollup.config.widgets}"/>
      <!-- output lib is saved in ${widgets.lib} -->
    </exec>
  </target>

  <target name="package_common">
     <copy file="${package.json.template}" tofile="${package.json}" overwrite="true">
      <filterset>
        <filter token="VERSION" value="${version}"/>
        <filter token="BUILD" value="${build.number}"/>
      </filterset>
    </copy>
    <copy file="${readme.md.template}" tofile="${readme.md}" overwrite="true">
      <filterset>
        <filter token="VERSION" value="${version}"/>
      </filterset>
    </copy>
  </target>

  <target name="package_haxe" depends="preprocess">
    <echo message="Version: ${version} build ${build.number}"/>
    <echo message="CID: ${cid}"/>
    <exec executable="haxe" failonerror="true">
      <arg value="build.web.full.hxml"/>
      <arg line="-D no-traces"/>
      <arg value="-D"/><arg value="LS_VERSION=${version}"/>
      <arg value="-D"/><arg value="LS_BUILD=${build.number}"/>
      <arg value="-D"/><arg value="LS_CID=${cid}"/>
      <arg line="-D LS_STRIP_LOGS=${dist}/logmap.json" if:true="${LS_STRIP_LOGS}"/>
      <!-- output lib is saved in ${haxe.orig.lib} -->
    </exec>
    <exec executable="haxe" failonerror="true">
      <arg value="--run"/>
      <arg value="tools.Patch"/>
      <arg value="${haxe.orig.lib}"/>
      <!-- output lib is saved in ${haxe.orig.lib} -->
    </exec>
    <exec executable="node" failonerror="true">
      <arg value="${tools.base.dir}/preprocess.js"/>
      <arg value="${haxe.inc}"/>
      <arg value="-b"/><arg value="${obj}"/>
      <arg value="-o"/><arg value="${haxe.lib}"/>
      <arg value="-START_WEB_JSDOC_EXCLUDE"/>
      <arg value="-LS_MPN"/>
    </exec>
  </target>

  <target name="test" description="Run the tests">
    <exec executable="haxe" failonerror="true">
      <arg value="test.web.hxml"/>
      <arg line="-D LS_MPN"/>
      <arg value="-D" if:set="UTEST_PATTERN"/><arg value="UTEST_PATTERN=${UTEST_PATTERN}" if:set="UTEST_PATTERN"/>
    </exec>
    <exec executable="node" failonerror="true">
      <arg value="${tools.base.dir}/preprocess.js"/>
      <arg value="${tools}/res/test.full.inc"/>
      <arg value="-o"/><arg value="${test}/lightstreamer_haxe.js"/>
      <arg value="-START_WEB_JSDOC_EXCLUDE"/>
      <arg value="-LS_MPN"/>
    </exec>
    <exec executable="npx" failonerror="true">
      <arg value="rollup"/>
      <arg value="--config"/>
      <arg value="${tools}/res/rollup.config.test.mjs"/>
    </exec>
    <exec executable="open">
      <arg value="index.html"/>
    </exec>
  </target>

  <target name="preprocess">
    <touch file="${obj.api.lib}" mkdirs="true"/>
    <exec executable="node" failonerror="true">
      <arg value="${tools.base.dir}/preprocess.js"/>
      <arg value="${api.inc}"/>
      <arg value="-b"/><arg value="${js.dir}"/>
      <arg value="-o"/><arg value="${obj.api.lib}"/>
      <arg value="-START_WEB_JSDOC_EXCLUDE"/>
      <arg value="-LS_MPN"/>
    </exec>
    <touch file="${obj.wrapper.lib}" mkdirs="true"/>
    <exec executable="node" failonerror="true">
      <arg value="${tools.base.dir}/preprocess.js"/>
      <arg value="${wrapper.inc}"/>
      <arg value="-b"/><arg value="${js.dir}"/>
      <arg value="-o"/><arg value="${obj.wrapper.lib}"/>
      <arg value="-START_WEB_JSDOC_EXCLUDE"/>
      <arg value="-LS_MPN"/>
    </exec>
  </target>

  <target name="clean" description="Clean the project">
    <delete dir="${build.base.dir}"/>
    <delete dir="${test}"/>
  </target>

</project>